{"mappings":"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","sources":["src/index.js","node_modules/@parcel/runtime-js/lib/runtime-a84770f818605e41.js","shader/vertex.glsl","shader/fragment.glsl","shader/atmosphereVertex.glsl","shader/atmosphereFragment.glsl"],"sourcesContent":["import * as THREE from \"three\";\r\nimport globe from \"../img/globe.jpg\";\r\n//shader in glsl\r\nimport vertexShader from \"../shader/vertex.glsl\";\r\nimport fragmentShader from \"../shader/fragment.glsl\";\r\nimport atmosphereVertexShader from \"../shader/atmosphereVertex.glsl\";\r\nimport atmosphereFragmentShader from \"../shader/atmosphereFragment.glsl\";\r\nimport gsap from \"gsap\";\r\n\r\n//canvas\r\nconst canvas = document.querySelector(\"#c\");\r\n\r\n//scene\r\nconst scene = new THREE.Scene();\r\n\r\n//camera\r\nconst camera = new THREE.PerspectiveCamera(\r\n  75,\r\n  window.innerWidth / window.innerHeight,\r\n  0.1,\r\n  1000\r\n);\r\n\r\n//camera position\r\ncamera.position.z = 15;\r\n\r\n//renderer\r\nconst renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n//asset pixel ratio\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\n\r\ndocument.body.appendChild(renderer.domElement);\r\n\r\n//create a sphere\r\n\r\nconst sphere = new THREE.Mesh(\r\n  new THREE.SphereGeometry(5, 50, 50),\r\n  new THREE.ShaderMaterial({\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    uniforms: {\r\n      globeTexture: {\r\n        value: new THREE.TextureLoader().load(globe),\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\n//create atmosphere\r\n\r\nconst atmosphere = new THREE.Mesh(\r\n  new THREE.SphereGeometry(5, 50, 50),\r\n  new THREE.ShaderMaterial({\r\n    vertexShader: atmosphereVertexShader,\r\n    fragmentShader: atmosphereFragmentShader,\r\n    blending: THREE.AdditiveBlending,\r\n    side: THREE.BackSide,\r\n  })\r\n);\r\n\r\n//atm scale\r\natmosphere.scale.set(1.1, 1.1, 1.1);\r\n\r\nscene.add(atmosphere);\r\n\r\n//adding objects to the scene by group\r\nconst group = new THREE.Group();\r\ngroup.add(sphere);\r\nscene.add(group);\r\n\r\n//stars background\r\nconst starGeometry = new THREE.BufferGeometry();\r\nconst starMaterial = new THREE.PointsMaterial({\r\n  color: 0xffffff,\r\n});\r\n\r\nconst starVertices = [];\r\nfor (let i = 0; i < 10000; i++) {\r\n  const x = (Math.random() - 0.5) * 2000;\r\n  const y = (Math.random() - 0.5) * 2000;\r\n  const z = -Math.random() * 3000;\r\n  starVertices.push(x, y, z);\r\n}\r\n\r\nstarGeometry.setAttribute(\r\n  \"position\",\r\n  new THREE.Float32BufferAttribute(starVertices, 3)\r\n);\r\n\r\nconst stars = new THREE.Points(starGeometry, starMaterial);\r\nscene.add(stars);\r\n\r\n//mouse object\r\nconst mouse = {\r\n  x: undefined,\r\n  y: undefined,\r\n};\r\n\r\n//animation loop\r\nconst animate = () => {\r\n  //recoursive loop\r\n  requestAnimationFrame(animate);\r\n  //render method to animate the scene\r\n  renderer.render(scene, camera);\r\n  //rotation of the sphere\r\n  sphere.rotation.y += 0.002;\r\n  //animation on mouse movement by gsap package\r\n  gsap.to(group.rotation, {\r\n    x: -mouse.y * 0.3,\r\n    y: mouse.x * 0.5,\r\n    duration: 2,\r\n  });\r\n};\r\n\r\nanimate();\r\n\r\n//mouse event coord\r\n\r\naddEventListener(\"mousemove\", () => {\r\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n  console.log(mouse);\r\n});\r\n","module.exports = new __parcel__URL__(\"globe.a7af8433.jpg\").toString();","varying vec2 vertexUV;\r\nvarying vec3 vertexNormal;\r\n\r\nvoid main() {\r\n    vertexUV = uv;\r\n    vertexNormal = normalize(normalMatrix * normal);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}","uniform sampler2D globeTexture;\r\nvarying vec2 vertexUV;\r\nvarying vec3 vertexNormal;\r\n\r\nvoid main() {\r\n\r\n    float intensity = 1.05 - dot(vertexNormal, vec3(0.0, 0.0, 1.0));\r\n\r\n    vec3 atmosphere = vec3(0.3, 0.6, 1.0) * pow(intensity, 1.5);\r\n    \r\n    gl_FragColor = vec4(atmosphere + texture2D(globeTexture, vertexUV).xyz, 1.0);\r\n}","varying vec3 vertexNormal;\r\n\r\nvoid main() {\r\n    vertexNormal = normalize(normalMatrix * normal);\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}","varying vec3 vertexNormal;\r\n\r\nvoid main() {\r\n\r\n    float intensity = pow(0.7 - dot(vertexNormal, vec3(0.0, 0.0, 1.0)), 2.0);\r\n    \r\n    gl_FragColor = vec4(0.3, 0.6, 1.0, 1.0) * intensity;\r\n}"],"names":[],"version":3,"file":"index.js.map"}